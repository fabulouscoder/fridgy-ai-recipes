import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button-enhanced"
import { Badge } from "@/components/ui/badge"
import { Clock, Users, BookmarkPlus, Share2, ChefHat, Heart, ExternalLink } from "lucide-react"
import { useToast } from "@/hooks/use-toast";

interface Recipe {
  title: string;
  ingredients: string[];
  instructions: string[];
  cooking_time: string;
  servings: number;
  difficulty: string;
  nutrition?: {
    calories?: number;
    protein?: string;
    carbs?: string;
    fat?: string;
  };
}

const RecipeResults = () => {
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [usedIngredients, setUsedIngredients] = useState<string[]>([]);
  const [user, setUser] = useState<any>(null);
  const { toast } = useToast();

  useEffect(() => {
    // Get user
    supabase.auth.getUser().then(({ data: { user } }) => {
      setUser(user);
    });

    // Load generated recipes from localStorage
    const loadRecipes = () => {
      const storedRecipes = localStorage.getItem('generatedRecipes');
      const storedIngredients = localStorage.getItem('usedIngredients');
      
      if (storedRecipes) {
        try {
          setRecipes(JSON.parse(storedRecipes));
        } catch (error) {
          console.error('Error parsing stored recipes:', error);
        }
      }
      
      if (storedIngredients) {
        try {
          setUsedIngredients(JSON.parse(storedIngredients));
        } catch (error) {
          console.error('Error parsing stored ingredients:', error);
        }
      }
    };

    loadRecipes();
    
    // Listen for storage changes (when new recipes are generated)
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'generatedRecipes' || e.key === 'usedIngredients') {
        loadRecipes();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    
    // Also check for changes periodically (for same-tab updates)
    const interval = setInterval(loadRecipes, 1000);

    return () => {
      window.removeEventListener('storage', handleStorageChange);
      clearInterval(interval);
    };
  }, []);

  const saveRecipe = async (recipe: Recipe) => {
    if (!user) {
      toast({
        title: "Sign In Required",
        description: "Please sign in to save recipes.",
        variant: "destructive",
      });
      return;
    }

    try {
      const { error } = await supabase
        .from('saved_recipes')
        .insert({
          user_id: user.id,
          title: recipe.title,
          ingredients: recipe.ingredients,
          instructions: recipe.instructions,
          cooking_time: recipe.cooking_time,
          servings: recipe.servings,
          difficulty: recipe.difficulty,
          nutrition: recipe.nutrition || null
        });

      if (error) throw error;

      toast({
        title: "Recipe Saved! âœ¨",
        description: `"${recipe.title}" has been saved to your collection.`,
      });

    } catch (error) {
      console.error('Error saving recipe:', error);
      toast({
        title: "Save Failed",
        description: "Could not save the recipe. Please try again.",
        variant: "destructive",
      });
    }
  };

  const shareRecipe = async (recipe: Recipe) => {
    const shareData = {
      title: `${recipe.title} - Fridgy Recipe`,
      text: `Check out this amazing recipe: ${recipe.title}\n\nIngredients: ${recipe.ingredients.join(', ')}\n\nGenerated by Fridgy AI`,
      url: window.location.href
    };

    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        // Fallback to copying to clipboard
        const recipeText = `${recipe.title}\n\nIngredients:\n${recipe.ingredients.map(ing => `â€¢ ${ing}`).join('\n')}\n\nInstructions:\n${recipe.instructions.map((inst, i) => `${i + 1}. ${inst}`).join('\n')}\n\nCooking Time: ${recipe.cooking_time}\nServings: ${recipe.servings}\nDifficulty: ${recipe.difficulty}`;
        
        await navigator.clipboard.writeText(recipeText);
        toast({
          title: "Recipe Copied! ðŸ“‹",
          description: "Recipe has been copied to your clipboard.",
        });
      }
    } catch (error) {
      console.error('Error sharing recipe:', error);
      toast({
        title: "Share Failed",
        description: "Could not share the recipe. Please try again.",
        variant: "destructive",
      });
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty?.toLowerCase()) {
      case 'easy':
        return 'bg-green-100 text-green-700 border-green-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'hard':
        return 'bg-red-100 text-red-700 border-red-200';
      default:
        return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  if (recipes.length === 0) {
    return null; // Don't render if no recipes
  }

  return (
    <section className="py-16 px-4 bg-accent/20" id="recipe-results">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-2 bg-secondary-soft/50 text-secondary px-4 py-2 rounded-full text-sm font-medium mb-6">
            <ChefHat className="w-4 h-4" />
            AI Generated Recipes
          </div>
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Perfect Recipes for Your Ingredients
          </h2>
          <p className="text-lg text-muted-foreground mb-4">
            Here are personalized recipes created just for you using: 
          </p>
          <div className="flex flex-wrap justify-center gap-2">
            {usedIngredients.map((ingredient, index) => (
              <Badge key={index} variant="outline" className="text-sm">
                {ingredient}
              </Badge>
            ))}
          </div>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {recipes.map((recipe, index) => (
            <Card key={index} className="shadow-warm hover:shadow-fresh transition-all duration-300 transform hover:-translate-y-1">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <CardTitle className="text-lg leading-tight mb-2">
                      {recipe.title}
                    </CardTitle>
                    <CardDescription className="text-sm">
                      A delicious meal using your available ingredients
                    </CardDescription>
                  </div>
                  <Badge className={`ml-2 ${getDifficultyColor(recipe.difficulty)}`}>
                    {recipe.difficulty}
                  </Badge>
                </div>

                <div className="flex items-center gap-4 text-sm text-muted-foreground mt-3">
                  <div className="flex items-center gap-1">
                    <Clock className="w-4 h-4" />
                    {recipe.cooking_time}
                  </div>
                  <div className="flex items-center gap-1">
                    <Users className="w-4 h-4" />
                    {recipe.servings} servings
                  </div>
                </div>
              </CardHeader>

              <CardContent className="space-y-4">
                {/* Ingredients */}
                <div>
                  <h4 className="font-medium text-sm mb-2">Ingredients:</h4>
                  <div className="flex flex-wrap gap-1">
                    {recipe.ingredients.slice(0, 4).map((ingredient, i) => (
                      <Badge key={i} variant="outline" className="text-xs">
                        {ingredient}
                      </Badge>
                    ))}
                    {recipe.ingredients.length > 4 && (
                      <Badge variant="outline" className="text-xs">
                        +{recipe.ingredients.length - 4} more
                      </Badge>
                    )}
                  </div>
                </div>

                {/* Instructions Preview */}
                <div>
                  <h4 className="font-medium text-sm mb-2">Instructions:</h4>
                  <ol className="text-xs text-muted-foreground space-y-1">
                    {recipe.instructions.slice(0, 2).map((step, i) => (
                      <li key={i}>
                        {i + 1}. {step.substring(0, 60)}{step.length > 60 ? '...' : ''}
                      </li>
                    ))}
                    {recipe.instructions.length > 2 && (
                      <li className="text-muted-foreground">+ {recipe.instructions.length - 2} more steps...</li>
                    )}
                  </ol>
                </div>

                {/* Nutrition */}
                {recipe.nutrition && (
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    {recipe.nutrition.calories && (
                      <div className="bg-accent/50 p-2 rounded text-center">
                        <div className="font-medium">{recipe.nutrition.calories}</div>
                        <div className="text-muted-foreground">calories</div>
                      </div>
                    )}
                    {recipe.nutrition.protein && (
                      <div className="bg-accent/50 p-2 rounded text-center">
                        <div className="font-medium">{recipe.nutrition.protein}</div>
                        <div className="text-muted-foreground">protein</div>
                      </div>
                    )}
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex gap-2 pt-2">
                  <Button 
                    variant="fresh" 
                    size="sm" 
                    className="flex-1"
                    onClick={() => saveRecipe(recipe)}
                  >
                    <BookmarkPlus className="w-4 h-4" />
                    Save
                  </Button>
                  <Button 
                    variant="soft" 
                    size="sm"
                    onClick={() => shareRecipe(recipe)}
                  >
                    <Share2 className="w-4 h-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Action Buttons */}
        {user && (
          <div className="text-center mt-8 space-x-4">
            <Button 
              variant="outline" 
              onClick={() => window.location.href = '/saved-recipes'}
            >
              <Heart className="w-4 h-4 mr-2" />
              View Saved Recipes
            </Button>
            <Button 
              variant="warm" 
              size="lg"
              onClick={() => window.location.href = '/pricing'}
            >
              <ExternalLink className="w-4 h-4 mr-2" />
              Upgrade for Unlimited Recipes
            </Button>
          </div>
        )}
      </div>
    </section>
  )
}

export default RecipeResults